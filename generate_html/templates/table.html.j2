<html lang="en">
    <head>
        <title>NYC MOVIES</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="styles/style.css" rel="stylesheet">

        <script>
            let MOVIE_CACHE = [];

            document.addEventListener('DOMContentLoaded', () => {
                MOVIE_CACHE = Array.from(document.querySelectorAll('.movie-wrapper')).map((movie) => {
                    const title = movie.querySelector('.title')?.textContent?.toLowerCase() || '';

                    const theaters = Array.from(movie.querySelectorAll('.theater')).map((theater) => {
                        const theaterName = theater.dataset.theater;
                        const showtimes = Array.from(theater.querySelectorAll('.showtime')).map((showtime) => {
                            const [showtimeDate, showtimeTime] = showtime.dataset.date.split(' ');
                            return {
                                showtime,
                                date: showtimeDate,
                                time: showtimeTime
                            };
                        });

                        return {
                            theater,
                            name: theaterName,
                            showtimes
                        };
                    });

                    return {
                        movie,
                        title,
                        theaters
                    };
                });

                const content = document.getElementById('content');
                content.style.display = 'none';
                setTimeout(() => content.style.display = '', 0);

                initUrlParams();
                initChecks();
                initDate();
                initTime();
                initSearch();
                filterMovies();

                document.querySelectorAll('.theater-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        updateState();
                        filterMovies();
                        const label = checkbox.closest('label');
                        if (checkbox.checked) {
                            label.classList.add('active');
                        } else {
                            label.classList.remove('active');
                        }
                    })
                });

                document.getElementById('search-input').addEventListener('input', (event) => updateSearch(event));
                document.getElementById('search-cancel').addEventListener('click', () => clearSearch());

                // Get rid of keyboard when the user hits enter
                document.getElementById('search-input').addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        this.blur();
                    }
                });

                document.getElementById('date').addEventListener('change', function (e) {
                    const date = e.target.value; // YYYY-MM-DD
                    document.getElementById('date').classList.add('active');
                    document.getElementById('today').classList.remove('active');
                    document.getElementById('tomorrow').classList.remove('active')
                    addDate(date);
                });

                // Set min selectable date to today
                const today = new Date().toISOString().split('T')[0];
                document.getElementById("date").setAttribute('min', today);

                document.getElementById('today').addEventListener('click', (event) => handleDateButton(event));
                document.getElementById('tomorrow').addEventListener('click', (event) => handleDateButton(event));

                document.getElementById('start-time').addEventListener('input', (event) => handleTimeInput(event));
                document.getElementById('end-time').addEventListener('input', (event) => handleTimeInput(event));
                document.getElementById('start-time').addEventListener('change', (event) => handleTimeChange(event));
                document.getElementById('end-time').addEventListener('change', (event) => handleTimeChange(event));
           });

            function updateSearch(event) {
                const value = event.target.value;
                const currentUrl = new URL(window.location);
                currentUrl.searchParams.delete('search');
                if (value) {
                    document.getElementById('search-input').classList.add('active');
                    currentUrl.searchParams.append('search', event.target.value);
                }
                else {
                    document.getElementById('search-input').classList.remove('active');
                }
                history.replaceState({}, '', currentUrl);
                filterMovies();
            }

            function clearSearch() {
                const currentUrl = new URL(window.location);
                currentUrl.searchParams.delete('search');
                const searchElem = document.getElementById('search-input');
                searchElem.value = '';
                searchElem.classList.remove('active');
                history.replaceState({}, '', currentUrl);
                filterMovies();
            }

            function initUrlParams() {
                const currentUrl = new URL(window.location);
                if (!currentUrl.searchParams.has('date') && !currentUrl.searchParams.has('theaters')) {
                    // Set today's date
                    const now = new Date();
                    const yyyy = now.getFullYear();
                    const mm = String(now.getMonth() + 1).padStart(2, '0');
                    const dd = String(now.getDate()).padStart(2, '0');
                    const todayStr = `${yyyy}-${mm}-${dd}`;
                    currentUrl.searchParams.set('date', todayStr);

                    // Set all theaters
                    const allTheaters = Array.from(document.querySelectorAll('.theater-checkbox'))
                        .map(checkbox => checkbox.value)
                        .join(',');
                    currentUrl.searchParams.set('theaters', allTheaters);
                    history.replaceState({}, '', currentUrl);
                }
            }

            function initTime() {
                const urlParams = new URLSearchParams(window.location.search);
                const startFromURL = urlParams.get('start-time');
                const endFromURL = urlParams.get('end-time');
                const startDisplay = document.getElementById('start-time-display');
                const endDisplay = document.getElementById('end-time-display');
 
                const startText = startFromURL || '00:00';
                const endText = endFromURL || '23:59';
                startDisplay.textContent = twentyFourToTwelveHour(startText);
                endDisplay.textContent = twentyFourToTwelveHour(endText);

                let startValue = timeToValue(startText);
                let endValue = timeToValue(endText);
                if (endText === '23:59') {
                    endValue = 100;
                }
                document.getElementById('start-time').value = `${startValue}`;
                document.getElementById('end-time').value = `${endValue}`;
                const range = document.getElementById('range-track');
                range.style.width = `${endValue - startValue}%`;
                range.style.left = `${startValue}%`;
                range.style.right = `${endValue}%`;

                if (!startFromURL || !endFromURL) {
                    addTime('00:00', '23:59');
                }
            }

            function twentyFourToTwelveHour(time) {
                let [hours, minutes] = time.split(':');
                hours = parseInt(hours);
                let am = hours < 12;
                let hoursMod = hours % 12;

                if (hoursMod === 0) {
                    hoursMod = 12;
                }
                if (hours === 24) {
                    hoursMod = 11;
                    minutes = 59;
                }
                return `${hoursMod < 10 ? '0' : ''}${hoursMod}:${minutes}${am ? 'am' : 'pm'}`;
            }

            function updateTimeDisplay(startTime, endTime) {
                if (startTime && endTime) {
                    const startTimeDisplay = document.getElementById('start-time-display');
                    const endTimeDisplay = document.getElementById('end-time-display');
                    startTimeDisplay.textContent = twentyFourToTwelveHour(startTime);
                    endTimeDisplay.textContent = twentyFourToTwelveHour(endTime);
                }
            }

            function handleTimeInput(event) {
                const start = document.getElementById('start-time');
                const end = document.getElementById('end-time');

                const range = document.getElementById('range-track');

                const low = Math.min(start.value, end.value);
                const high = Math.max(start.value, end.value);

                range.style.left = `${low}%`;
                range.style.right = `${high}%`;
                range.style.width = `${high - low}%`;

                const lowTime = valueToTime(low);
                const highTime = valueToTime(high);

                updateTimeDisplay(lowTime, highTime);
            }

            function handleTimeChange(event) {
                const start = document.getElementById('start-time');
                const end = document.getElementById('end-time');

                const low = Math.min(start.value, end.value);
                const high = Math.max(start.value, end.value);

                const lowTime = valueToTime(low);
                const highTime = valueToTime(high);

                addTime(lowTime, highTime);
            }

            function addTime(startTime, endTime) {
                if (startTime && endTime) {
                    const url = new URL(window.location);

                    url.searchParams.delete('start-time');
                    url.searchParams.delete('end-time');
                    url.searchParams.append('start-time', startTime);
                    url.searchParams.append('end-time', endTime);

                    history.replaceState({}, '', url);
                }
                filterMovies();
            }

            function valueToTime(value) {
                const total = Math.floor((value / 100) * 1440);
                const hours = Math.floor(total / 60);
                const minutes = (total % 60) - (total % 30);
                return `${hours < 10 ? '0' : ''}${hours}:${minutes}${minutes < 10 ? '0' : ''}`;
            }

            function timeToValue(time) {
                const [hours, minutes] = time.split(':');
                return (((hours * 60) + minutes) / 1440);
            }

            function handleDateButton(event) {
                // Remove all active date buttons first
                document.getElementById('today').classList.remove('active');
                document.getElementById('tomorrow').classList.remove('active');
                document.getElementById('date').classList.remove('active');

                const elems = Array.from(event.target.classList);
                const element = document.getElementById(event.target.id);
                if (!elems.includes('active')) {
                    element.classList.add('active');
                }
                const now = new Date();
                let targetDate;

                if (event.target.id === 'today') {
                    targetDate = now;
                } else if (event.target.id === 'tomorrow') {
                    targetDate = new Date(now);
                    targetDate.setDate(now.getDate() + 1);
                }

                if (targetDate) {
                    const yyyy = targetDate.getFullYear();
                    const mm = String(targetDate.getMonth() + 1).padStart(2, '0');
                    const dd = String(targetDate.getDate()).padStart(2, '0');
                    const formatted = `${yyyy}-${mm}-${dd}`;
                    document.getElementById('date').value = formatted;
                    addDate(formatted);
                }
            }

            function addDate(date) {
                if (date) {
                    const url = new URL(window.location);

                    url.searchParams.delete('date');
                    url.searchParams.append('date', date);
                    history.replaceState({}, '', url);
                }
                filterMovies();
            }
            
            function getSelectedTheaters() {
                return Array.from(document.querySelectorAll('.theater-checkbox:checked')).map((box) => box.value).join(',');
            }

            function initSearch() {
                const urlParams = new URLSearchParams(window.location.search);
                const searchFromURL = urlParams.get('search');
                const searchInput = document.getElementById('search-input');

                if (searchFromURL) {
                    searchInput.value = searchFromURL;
                    searchInput.classList.add('active');
                }
                else {
                    searchInput.classList.remove('active');
                }
            }

            function initDate() {
                const urlParams = new URLSearchParams(window.location.search);
                const dateFromURL = urlParams.get('date');

                const todayBtn = document.getElementById('today');
                const tomorrowBtn = document.getElementById('tomorrow');
                const customBtn = document.getElementById('date');

                // Clear previous active states
                todayBtn.classList.remove('active');
                tomorrowBtn.classList.remove('active');
                customBtn.classList.remove('active');

                // Default to today if no param
                if (!dateFromURL) {
                    todayBtn.classList.add('active');
                    return;
                }

                const today = new Date();
                const yyyy = today.getFullYear();
                const mm = String(today.getMonth() + 1).padStart(2, '0');
                const dd = String(today.getDate()).padStart(2, '0');
                const todayStr = `${yyyy}-${mm}-${dd}`;

                const tomorrow = new Date(today);
                tomorrow.setDate(today.getDate() + 1);
                const tmm = String(tomorrow.getMonth() + 1).padStart(2, '0');
                const tdd = String(tomorrow.getDate()).padStart(2, '0');
                const tomorrowStr = `${tomorrow.getFullYear()}-${tmm}-${tdd}`;

                if (dateFromURL === todayStr) {
                    todayBtn.classList.add('active');
                } else if (dateFromURL === tomorrowStr) {
                    tomorrowBtn.classList.add('active');
                } else {
                    customBtn.classList.add('active');
                    customBtn.value = dateFromURL;
                }
            }

            function initChecks() {
                const urlParams = new URLSearchParams(window.location.search);
                const theatersFromURL = urlParams.get('theaters') ? urlParams.get('theaters').split(',') : [];
                const allCheckboxes = document.querySelectorAll('.theater-checkbox');

                if (theatersFromURL.length > 0) {
                    allCheckboxes.forEach(checkbox => {
                        const live = theatersFromURL.includes(checkbox.value);
                        checkbox.checked = live;
                        if (live) {
                            checkbox.closest('label').classList.add('active');
                        }
                        
                    });
                }
                else {
                    allCheckboxes.forEach(checkbox => {
                        checkbox.checked = true;
                        const label = checkbox.closest('label');
                        label.classList.add('active');
                    });
                }
            }

            function updateState() {
                const selectedTheaters = getSelectedTheaters();
                const url = new URL(window.location);
                url.searchParams.delete('theaters');
                url.searchParams.append('theaters', selectedTheaters);
                history.replaceState({}, '', url);
            }

            // 0 = EQ, 1 = LEQ, 2 = GEQ
            function showtimeCompTime(showtime, time) {
                const [showHour, showMinutes, temp] = showtime.split(':').map((str) => parseInt(str));
                const [hour, minutes] = time.split(':').map((str) => (parseInt(str)));
                if (showHour === hour && showMinutes === minutes) {
                    return 0;
                }
                else if (showHour < hour || (showHour === hour && showMinutes <= minutes)) {
                    return 1;
                }
                else {
                    return 2;
                }
            }


            function isValidTime(startTime, endTime, showtime) {
                if ([0, 2].includes(showtimeCompTime(showtime, startTime)) &&
                    [0, 1].includes(showtimeCompTime(showtime, endTime))) {

                    return true;
                }
                return false;
            }

            function filterMovies() {
                console.time('filterMovies');
                const urlParams = new URLSearchParams(document.location.search);
                const theatersParam = urlParams.get("theaters");
                const dateParam = urlParams.get("date");
                const searchParam = urlParams.get("search")?.toLowerCase() || '';
                const startTimeParam = urlParams.get("start-time");
                const endTimeParam = urlParams.get("end-time");
                const validTheaters = new Set(theatersParam?.split(',') || []);

                MOVIE_CACHE.forEach(({movie, title, theaters}) => {
                    let hasMatchingTheaterAndDate = false;

                    if (!title.includes(searchParam)) {
                        movie.classList.add('hidden');
                        return;
                    }

                    theaters.forEach(({theater, name, showtimes}) => {
                        let hasValidShowtime = false;

                        showtimes.forEach(({showtime, date, time}) => {
                            const matchesDate = date === dateParam;
                            const matchesTime = isValidTime(startTimeParam, endTimeParam, time);

                            if (matchesDate && matchesTime) {
                                showtime.classList.remove('hidden');
                                hasValidShowtime = true;
                            }
                            else {
                                showtime.classList.add('hidden');
                            }
                        });
                        const isTheaterVisible = validTheaters.has(name) && hasValidShowtime;
                        if (isTheaterVisible) hasMatchingTheaterAndDate = true;
                        theater.classList.toggle('hidden', !isTheaterVisible);
                    });
                    movie.classList.toggle('hidden', !hasMatchingTheaterAndDate);
                });
                console.timeEnd('filterMovies');
            }
        </script>
    </head>
    <body class="bg-gray-100">
        <div class="header m-4 border-1 border-black">
            <h1 class="page-title font-bold text-center text-5xl bg-red-100 py-4">
                <a href="https://nycmovies.club">NYC MOVIES . CLUB</a>
            </h1>
            <div class="subhead flex flex-row justify-center bg-red-100 items-center gap-2 border-t-1 border-black text-center">
                <h3 class="border-r-1 border-black flex items-center w-[50%]">
                    <a class="w-full ml-auto mr-auto" href="/index.html">All Movies Showing</a>
                </h3>
                <h3 class="flex items-center w-[50%]">
                    <a class="w-full ml-auto mr-auto" href="/calendar.html">All Showtimes</a>
                </h3>
            </div>
        </div>
        <div class="flex flex-row items-center justify-center gap-2 mt-4 text-center">
            <button id="today" class="date-button text-white text-sm px-3 py-1 rounded-lg hover:bg-blue-700 transition cursor-pointer">Today</button>
            <button id="tomorrow" class="date-button text-black text-sm px-3 py-1 rounded-lg hover:bg-blue-700 transition cursor-pointer">Tomorrow</button>
            <div>
                <input type="date" id="date" class="date-button border border-white rounded px-2 py-1 bg-white text-black text-sm">
            </div>
        </div>
        <div id="time-select-wrapper" class="flex flex-col items-center justify-center mt-2 text-center ml-auto mr-auto w-auto">
            <div id="time-display" class="flex flex-row justify-center items-center gap-1">
                <span id="start-time-display" class="pointer-events-none text-sm px-2 py-1 rounded">12:00</span>
                <div class="pointer-events-none"> - </div>
                <span id="end-time-display" class="pointer-events-none text-sm px-2 py-1 rounded">12:00</span>
            </div>
            <div id="time-slider" class="relative appearance-none w-[200px] h-6 max-w-md mx-auto mb-1">
                <div id="range-track" class="absolute appearance-none h-1 z-2 mt-[6px] w-full bg-blue-500 rounded transform"></div>
                <div id="range-track-under" class="absolute appearance-none h-1 z-1 mt-[6px] w-full bg-gray-500 rounded transform"></div>
                <input type="range" id="start-time" min="0" max="100" value="0" default="0" step="2"
                    class="absolute w-full pointer-events-none appearance-none bg-transparent z-30 left-0"
                >
                <input type="range" id="end-time" min="0" max="100" value="100" step="2"
                    class="absolute w-full pointer-events-none appearance-none bg-transparent z-20 left-0"
                >
            </div>
        </div>
        <div id="theaters-select" class="theaters-select flex flex-row items-center justify-center gap-2 mt-4 text-center">
            {% for theater in theaters %}
                <label class="theater-select-label bg-blue-600 text-white text-sm px-3 py-1 rounded-lg hover:bg-blue-700 transition cursor-pointer">
                    <div class="check-wrapper">
                        <input type="checkbox" class="theater-checkbox invisible hidden" value="{{ theater }}" checked>
                        <span class="theater-select-span">{{ theater }}</span>
                    </div>
                </label>
            {% endfor %}
        </div>
        <div id="search-wrapper" class="search-wrapper text-sm px-1 text-sm mt-4 rounded-lg bg-white">
            <input id="search-input" class="search-input" inputmode="search" enterkeyhint="done" type="text" placeholder="Search here">
            <button id="search-cancel" title="Clear" class="search-cancel cursor-pointer">
                <svg class="w-full h-[24px]" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></svg>
            </button>
        </div>
        <div id="content" class="content px-4 py-6 grid md:grid-cols-2 lg:grid-cols-2 grid-cols-1 justify-center items-center gap-4">
        {% for movie in movies %}
            <div class="movie-wrapper mx-w-full self-start">
                <div class="movie rounded w-full max-w-3xl ml-auto mr-auto bg-white shadow-md hover:shadow-lg transition-shadow duration-300 flex flex-col sm:flex-row overflow-hidden">
                    <div class="image-wrapper p-1 sm:h-auto min-w-[200px] min-h-[300px] sm:flex-shrink-0 self-center sm:self-start">
                        <img class="object-cover w-full max-w-[200px] h-auto" 
                            loading="lazy"
                            decoding="async"
                            src="{{ movie.image}}" 
                            alt="{{ movie.title }} Poster"
                        >
                    </div> 
                    <div class="details p-4 flex-1 flex flex-col justify-start">
                        <div class="mb-3">
                            <div class="title text-xl font-bold text-gray-800">{{ movie.title }}</div>
                            <div class="text-sm text-gray-600 mt-2">
                                <div>Director: <span class="text-gray-800 font-medium">{{ movie.directors }}</span></div>
                                <div>Runtime: <span class="text-gray-800 font-medium">{{ movie.runtime }}</span></div>
                            </div>
                        </div>
                        <div class="border-t border-gray-300 my-2"></div>
                        <div class="flex flex-col gap-3">
                            <div class="text-sm font-medium text-gray-600">Showtimes</div>
                            <div class="theaters">
                            {% for theater in movie.theaters %}
                                <div id="theater" class="theater" data-theater="{{ theater.name }}">
                                    <div class="text-xs font-semibold text-gray-700"><a target="_blank" href="{{ theater.link }}">{{ theater.name }}</a></div>
                                    <div class="flex flex-wrap gap-2 mt-1">
                                    {% for showtime in theater.showtimes %}
                                        <a href="{{ showtime.link }}" target="_blank" data-date="{{ showtime.time }}" id="showtime" class="showtime bg-blue-600 text-white text-sm px-3 py-1 rounded-lg hover:bg-blue-700 transition">{{ showtime.display_time }}</a>
                                    {% endfor %}
                                    </div>
                                </div>
                            {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
        </div>
    </body>
</html>
